# gestion-riego-frontend/Dockerfile
FROM node:18-alpine

WORKDIR /app

# Copiar archivos de dependencias
COPY package*.json ./

# Instalar solo dependencias de producción primero
RUN npm ci --legacy-peer-deps --only=production --ignore-scripts

# Instalar dependencias de desarrollo necesarias para el build
RUN npm ci --legacy-peer-deps --ignore-scripts

# Instalar serve
RUN npm install -g serve

# Copiar archivos públicos
COPY public ./public

# Copiar código fuente
COPY src ./src

# Copiar archivos de configuración
COPY manifest.json ./public/
COPY service-worker.js ./public/

# Variables de entorno para build optimizado
ENV NODE_OPTIONS="--max-old-space-size=2048"
ENV GENERATE_SOURCEMAP=false
ENV CI=false
ENV DISABLE_ESLINT_PLUGIN=true
ENV IMAGE_INLINE_SIZE_LIMIT=0

# Construir con configuración de bajo uso de memoria
RUN npm run build -- --max_old_space_size=2048

# Limpiar después del build
RUN rm -rf node_modules src public && \
    npm cache clean --force

# Reinstalar solo serve para producción
RUN npm install -g serve

EXPOSE 3000

CMD ["serve", "-s", "build", "-l", "tcp://0.0.0.0:3000"]